********************************************************************************
			FORMATO DE LOS ARCHIVOS
			-----------------------
********************************************************************************

Para que los archivos puedan ser reconocidos hay que establecer un formato
determinado. Por el momento solo vamos a reconocer archivos .cpp, esto es para
no contaminar el .h (la interfaz).


Directory struct
----------------
There will be 5 files: 
project.xml (will contain the information of the project).
modules.xml (will contain all the modules of the project).
issues.xml (will contain all the issues of the project).
requirements.xml (will contain all the requirements of the project)
notes.xml (will contain all the notes of the project).


Modulos
-------

Cada modulo / clase debera tener un comentario (al principio en general)
que indique el peso (osea, que tan importante es en el proyecto el modulo, 
mientras mayor peso, mayor importancia tiene), de la siguiente forma.

MODULE_WEIGHT = X;
MODULE_TESTED = Y;

Donde X debera ser el peso (numero entero). Ademas debe haber un ';' luego del 
valor.
Y puede ser TRUE | FALSE. determina si el modulo fue testeado o no.


Funciones/Metodos
-----------------

Cada funcion/metodo debe tener un comentario inmediatamente por encima de su
definicion de la siguiente forma.

FUNC_COMPLETED = X;	FUNCTION_WEIGHT = Y; 	FUNC_TESTED = Z;

Donde COMPLETED indica el porcentaje (en enteros) de cuanto esta completa
la funcion determinada. FUNCTION_WEIGHT indica el peso que tiene la funcion
en el modulo determinado (no esta relacionada con el proyecto en si, solo con
el modulo en la cual esta definida).
La separacion entre COMPLETED = X y FUNCTION_WEIGHT puede ser tanto un espacio,
enter, tabulador. La unica restriccion es que luego de cada valor (X | Y) debe
ir un ';'.
Z puede ser TRUE | FALSE (puede ser minuscula/mayuscula).


Los comentarios que indican las diferentes cosas NO es necesario que esten
en comentarios separados, pueden estar incluidos dentro de otros comentarios.




********************************************************************************
		FORMATO (de como vamos a guadar los tads)
********************************************************************************
The format will be XML notation, with no attributes, every element of the object
will be a sub-element of the root element.

TAD NOTE
--------
<Note>
	<ObjectId>
		ID
	</ObjectId>
	
	<Data>
		note...
	</Data>
	
</Note>


TAD ISSUE
---------
<Issue>

	<ObjectId>
		ID
	</ObjectId>
	
	<Description>
		Desc
	</Description>
	
	<Title>
		title
	</Title>
	
	<Creation_Date>
		The date when was created the issue
	</Creation_Date>
	
	<Expires_Date>
		The date when expires the issue, its something like the 
		"DeadLine"
	</Expires_Date>
	
	<Status>
		The status that it is the issue
	</Status>
	
	<Kind>
		Issue kind
	</Kind>
	
	<Priority>
		title
	</Priority>
	
</Issue>


TAD FUNCTION
------------
Probably this TAD never will be saved, because is loaded at run time, and will
change all the time. But for compatibility we will set the structure of the
XML notation.

<Function>
	
	<ObjectId>
		ID
	</ObjectId>
	
	<Completed>
		True/False (it is completly developed?)
	</Completed>
	
	<Weight>
		the Weight of the function in the module
	</Weight>
	
	<Tested>
		True/False depends if the function was tested or not.
	</Tested>
	
	<Name>
		Function name
	</Name>

</Function>


TAD MODULE
-----------

<Module>

	<ObjectId>
		ID
	</ObjectId>
	
	<Name>
		Module Name
	</Name>
	
	<Description>
	
	</Description>
	
	<FileName>
		the file associated to the module
	</FileName>
	
	<NoteList>
		<Note-ID>
			Note 1
		</Note-ID>
		
		<Note-ID>
			Note 2
		</Note-ID>
		
		<Note-ID>
			Note 3
		</Note-ID>
		..
	</NoteList>
	
	<IssueList>
		<Issue-ID>
			....
		</Issue-ID>
		....
	</IssueList>
	
	
	
	
</Module>



TAD PROJECT
-----------

<Project>

	<ObjectId>
		ID
	</ObjectId>
	
	<Name>
		Project Name
	</Name>
	
	<Description>
		Project Description
	</Description>
	
	<DirectoriesList>
		.
		../
		./mod1
		./mod2
		...
		(the list of the directories have to be separeted by a '\n')
	</DirectoriesList>
	
	<ModulesList>
		<Module-ID>
			ID
		</Module-ID>
		
		<Module-ID>
			ID
		</Module-ID>
		
		<Module-ID>
			ID
		</Module-ID>
		..
	</ModulesList>
	
	<NoteList>
		<Note-ID>
			Note 1
		</Note-ID>
		
		<Note-ID>
			Note 2
		</Note-ID>
		
		<Note-ID>
			Note 3
		</Note-ID>
		..
	</NoteList>
	
	
	<IssueList>
		<Issue-ID>
			....
		</Issue-ID>
		....
	</IssueList>
	
	<RequirementList>
		<Requirement-ID>
			....
		</Requirement-ID>
		....
	</RequirementList>
	
</Project>



TAD REQUIREMENT
---------------


<Requirement>

	<ObjectId>
		ID
	</ObjectId>
	
	<Title>
		Requirement Name
	</Title>
	
	<Description>
		Project Description
	</Description>
	
	<Priority>
		Req priority
	</Priority>
	
	<ModulesList>
		<Module-ID>
			ID
		</Module-ID>
		
		<Module-ID>
			ID
		</Module-ID>
		
		<Module-ID>
			ID
		</Module-ID>
		..
	</ModulesList>
	
	<IssueList>
	
		<Issue-ID>
			Id
		</Issue-ID>
		..
	</IssueList>
	
</Requirement>




********************************************************************************
				SEARCHER
********************************************************************************
El archivo de configuracion debe estar hecho de la siguiente forma

X = Y;

X representa la cadena a buscar en los archivos source y no puede tener '\n' en
el archivo de configuracion del searcher.
En los archivos source/headers, vamos a tener algo de la forma:
X <data>; con <data> son los datos/descripciones que queremos poner (ej:
NOTE: esto es \n una nota;), debe terminar con ';'

Y representa la accion a realizar una vez encontrada la cadena X.
Y puede tener las siguientes formas
SEARCHER_TASK_K_BUGFIX,		/* es una tarea para reparar un bug */
SEARCHER_TASK_K_REVISION,	/* es una tarea para revisar algo */
SEARCHER_TASK_K_TODO,		/* tarea normal */
SEARCHER_TASK_k_IMPROVE,		/* tarea de mejoramiento */
SEARCHER_TASK_K_NORMAL		/* tarea normal..? wtf XD */
SEARCHER_NOTE
donde en cada caso se generara lo que representa y sera asociada al modulo
en el que se encontro.

* Notar que searcher buscara tanto en los archivo headers como los source (que 
tengan el mismo nombre que el header pero con diferente extencion).








